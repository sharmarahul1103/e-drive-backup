package com.Security.Configuration;

import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.Base64;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContext;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

@Component
public class CustomFilter extends OncePerRequestFilter {
	
	@Autowired
	UserDetailsServiceImpl userDetailsServiceImpl;
	SecurityContext context=SecurityContextHolder.createEmptyContext();

	@Override
	protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
			throws ServletException, IOException {
		// TODO Auto-generated method stub
		
		System.out.println("inside custom filter");
		
		String header=request.getHeader("authorization");
		System.out.println(header);
		filterChain.doFilter(request, response);
		
		String authType=header.substring(0, 5);
		String token=header.substring(6);
		System.out.println(authType+"-----"+token);
		
		
		if(authType.equals("Basic"))
		{
			 byte[] decoded = Base64.getDecoder().decode(token);                  //decoding credentials
	         String credentials = new String(decoded, StandardCharsets.UTF_8);
	         System.out.println(credentials);
	         
	         String arr[]=credentials.split(":");
	         for(String i:arr)
	         {
	        	 System.out.println("details:"+i);
	         }
	         
	         UserDetails userDetails=userDetailsServiceImpl.loadUserByUsername(arr[0]);
	         System.out.println(userDetails.getUsername());
	         System.out.println(userDetails.getPassword());
	         System.out.println(userDetails.getAuthorities());
	         
	         Authentication authObject=new UsernamePasswordAuthenticationToken(userDetails.getUsername(), userDetails.getPassword(), userDetails.getAuthorities());
	         if(authObject.isAuthenticated())
	         {
	        	 
	        	 context.setAuthentication(authObject);
	        	// System.out.println(context.getAuthentication());
	        	filterChain.doFilter(request, response); 
	         }
	         
	         
		}
		System.out.println(context.getAuthentication());
		filterChain.doFilter(request, response);
	}

}
